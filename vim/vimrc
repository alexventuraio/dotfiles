" PERFORMANCE: https://github.com/joshukraine/dotfiles/blob/master/vim-performance.md
set nocompatible

" Specify a directory for plugins (https://github.com/junegunn/vim-plug)
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
" Make sure you use single quotes

" Themes
" Plug 'morhetz/gruvbox'
Plug 'tomasr/molokai'
Plug 'hzchirs/vim-material'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'Kruhlmann/cobalt2-vim-theme'
" Plug 'phanviet/vim-monokai-pro'
" Plug 'Erichain/vim-monokai-pro'

" IDE
Plug 'sheerun/vim-polyglot'
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'wakatime/vim-wakatime'
Plug 'jiangmiao/auto-pairs'
Plug 'jlanzarotta/bufexplorer'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'terryma/vim-multiple-cursors'
" Plug 'ycm-core/YouCompleteMe'
Plug 'vim-scripts/AutoComplPop'
Plug 'SirVer/ultisnips'

" Ruby & Rails
Plug 'slim-template/vim-slim'
Plug 'kchmck/vim-coffee-script'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
" Plug 'tpope/vim-endwise'

" Javascript & React
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'mattn/emmet-vim'
Plug 'maxmellon/vim-jsx-pretty'
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'

" Initialize plugin system
call plug#end()

syntax on                              " Turn on syntax highlighting allowing local overrides
syntax enable                          " Turn on syntax highlighting allowing local overrides

filetype on
filetype plugin on
filetype indent on                     " Turn on filetype plugins (:help filetype-plugin)

set t_Co=256
set guioptions-=T
set encoding=utf-8
set background=dark
set title                              " Display title
set sw=2                               " Indentacion a dos espacios
set mouse=a                            " Enable mouse inside terminal VIM
set cursorline                         " Mostrar linea en la posicion actual del cursor
set cursorcolumn                       " Show the column for the current cursor position
set number                             " Show line-number
set numberwidth=5                      " Ancho de la columna para line-number
"set relativenumber                     " Show line number relatively to cursor position
"set clipboard=unnamed                  " Copiar todo al clipboard del sistema
set showmatch                          " Show matching brackets
set showcmd                            " Mostrar los comandos que se estan ejecutando
set ruler                              " Show cursor actual line and column number
set laststatus=2                       " Display status bar in 2 lines
set noshowmode                         " Do not show current VIM mode
set wildmenu                           " Command line autocomplete menus
set complete+=kspell
set completeopt=menuone,longest
set updatetime=100                     " Git diff markers refresh time
set scrolloff=8                        " Start scrolling text before reaching the bottom
set ignorecase                         " case insensitive matching

set nowrap                             " Do not wrap lines
" Indentation {{{
set tabstop=2 softtabstop=2            " a tab is two spaces
set shiftwidth=2                       " an autoindent (with <<) is two spaces
set shiftround                         " Round indent to multiple of 'shiftwidth'
set expandtab                          " use spaces, not tabs
set smarttab
set autoindent
set smartindent
set cindent
" }}}

set list                               " Show invisible characters
set backspace=indent,eol,start         " Backspace through everything in insert mode

set hlsearch                           " Highlight search things
set incsearch                          " Highlight next match on searching

" Tab Split {{{
set splitright
set splitbelow
" }}}

" Create the `tags` file (may need to install ctags first)
" command! MakeTags !ctags -R .
command! MakeTags !ctags -R --exclude=.git --exclude=log *
set tags=./tags;                       " tell Vim where to look for the tags file.

" Backup and swap files
set backupdir^=~/.vim/_backup//        " where to put backup files.
set directory^=~/.vim/_temp//          " where to put swap files.


let mapleader=","


" Move between splitted windows by holding CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ============================================================ GUI colorschems {{
" Enable 24bit true color if you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
  set termguicolors
endif
"colorscheme gruvbox
"colorscheme monokai_pro
"colorscheme monokai_pro_machine
"colorscheme dracula
"colorscheme cobalt2
" -------------------------------
"colorscheme molokai
"set transparency=15                    " To set a transparency on the app
" *** Required to show molokai with light-grey background ***
"let g:molokai_original = 1
"set background=dark
" -------------------------------
colorscheme alex-material
"colorscheme vim-material
let g:airline_theme='material'
" ============================================================ }}}

" GUI fonts {{
if has('mac') && has('gui_running')
  set macligatures                       " Show ligatures with supported fonts (MacVim GUI)
  set guifont=Operator\ Mono\ Lig\ Book:h16
endif
" }}

" ============================================================ Vim-Airline config {{
" For molokai colorscheme use custom theme to change filename color on inactive windows
"let g:airline_theme='dark_alex'
" Enable smarter tab line to be colored
let g:airline#extensions#tabline#enabled = 1
" Fancy arrow symbols, requires a patched font(https://github.com/vim-airline/vim-airline/issues/2338)
let g:airline_powerline_fonts = 1
" Branch extension for airline
let g:airline#extensions#branch#displayed_head_limit = 10
" Powerline symbols to be correctly rendered in MacVim
if has("gui_running")  
  " let g:airline_left_sep = '>'
  let g:airline_left_alt_sep = '〉'
  " let g:airline_right_sep = '<'
  let g:airline_right_alt_sep = '〈'
endif
" ============================================================ }}

" -- Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif
" -- (Hopefully) removes the delay when hitting ESC in insert mode
set ttimeout                           " Time out on key codes
set ttimeoutlen=1                      " Used for key code delays
set ttyfast                            " Indicates fast terminal connection

" List chars {{{
" set list listchars=tab:▶‒,nbsp:∙,trail:∙,extends:▶,precedes:◀,eol:↲
set list listchars=tab:▸─,nbsp:␣,trail:·,extends:»,precedes:«,eol:¬
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=white guibg=#ff005f
" }}}

" No sound on errors {{{
set noerrorbells
set visualbell t_vb=
set tm=500
" }}}

" -- Strip trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Easymotion-shortcuts config
nmap <Leader>s <Plug>(easymotion-s2)


" Define a directory where my snippets were to be located:
" https://stackoverflow.com/a/37514464/4111295
let g:UltiSnipsSnippetDirectories=["~/Dropbox/Code/dotfiles/vim/UltiSnips"]
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<Leader><Leader>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" NERDTree config
autocmd StdinReadPre * let s:std_in=1  " This trick also prevents NERDTree from hiding when first selecting a file.
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
let NERDTreeShowHidden=1               " Show hidden files by default
nmap <Leader>n :NERDTreeFind<CR>       " Find the current file in the file explorer
nmap <Leader>m :NERDTreeToggle<CR>     " Open/close file explorer

" NERDCommenter mappings
if has("gui_macvim") && has("gui_running")
  nmap <D-/> <Plug>NERDCommenterToggle<CR>       " Toggle comment on current line
  imap <D-/> <Esc><Plug>NERDCommenterToggle<CR>i " Toggle comment on current line
else
  nmap <Leader>/ <Plug>NERDCommenterToggle<CR>
endif

" CtrlP mappings/configuration
set runtimepath^=~/.vim/bundle/ctrlp.vim
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$|\tags$'
  \ }
" Shorcut to execute :ClearCtrlPCache
nmap <Leader>C :CtrlPClearCache<cr>             " Refresh just CtrlP
nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>:CtrlPClearCache<cr> " Refresh CtrlP & NERDTree


" fugitive.vim mappings {{{
nmap <leader>gb :Git blame<CR>
nmap <leader>gs :Git<CR>
nmap <leader>gd :Git diff<CR>
nmap <leader>gl :Git log<CR>
nmap <leader>gc :Git commit<CR>
nmap <leader>gp :Git push<CR>
" }}}

" -- Clear highlights on hitting 'ESC' twice
nnoremap <esc><esc> :noh<return>

" -- Set a line length marker
set colorcolumn=100

" Fix indentation in file
map <Leader>i mmgg=G`m<CR>

" Auto-commands {{{
if has("autocmd")
  " Set Syntax Highlighting for odd file types
  augroup filetypedetect
    au BufNewFile,BufRead .gitconfig,.git/* set noet
    au BufNewFile,BufRead Dockerfile* setf dockerfile
  augroup END
endif
" }}}

" Prettier auto-format without "@format" or "@prettier" tag {{{
"let g:prettier#autoformat = 1
"let g:prettier#autoformat_require_pragma = 0
" }}}

" Maps for YouCompleteMe
" nnoremap <Silent> <Leader>gd :YcmCompleter GoTo<CR>
" nnoremap <Silent> <Leader>gf :YcmCompleter FixIt<CR>

" Copy to system clipboard from Vim terminal
if !has("gui_macvim") && !has("gui_running")
  " vmap <C-c> "+y
  vmap <Leader>y "+y
endif

" Move 1 more lines up or down in normal and visual selection modes.
nnoremap K :m .-2<CR>==
nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" Emmet trigger key
let g:user_emmet_mode='n'                        " only enable normal mode functions.
let g:user_emmet_leader_key=';'                  " leader key for emmet (;,)

" Auto-resize splits when Vim gets resized.
autocmd VimResized * wincmd =
